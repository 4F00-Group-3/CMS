{"version":3,"sources":["editor/components/EditorSidebar.js","ajax.js","editor/constants.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","style","buttonContainerStyle","onClick","sideBarButton_OnClick","icon","faIcon","sideBarIconStyle","sideBarTextStyle","text","buttonName","console","log","$","post","function","message","data","alert","EditorSideBar","bind","sideBarContainerStyle","faFont","faFileImage","faAsterisk","faBars","faAlignRight","faArrowDown","faCircle","Component","marginLeft","constants","marginRight","marginTop","margin","width","height","background","border","padding","float","borderRadius","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAiCA,SAASA,EAAOC,GACZ,OACI,4BAAQC,MAAOC,EAAsBC,QAASC,GAC1C,kBAAC,IAAD,CAAiBC,KAAML,EAAMM,OAAQL,MAAOM,IAC5C,uBAAGN,MAAOO,GAAmBR,EAAMS,OAM/C,SAASL,EAAsBM,GAC3BC,QAAQC,IAAIF,EAAa,YA1B7BC,QAAQC,KCfAC,IAAEC,KAAK,8CAA+C,CAClDC,SAAU,OACVC,QAAQ,UACP,SAASC,GACVC,MAAMD,MAMP,S,IDsCLE,E,YACF,WAAYnB,GAAO,IAAD,8BACd,4CAAMA,KACDI,sBAAsBgB,KAA3B,gBAFc,E,qFAMdT,QAAQC,IAAI,a,+BAMZ,OACI,yBAAKX,MAAOoB,GACR,kBAACtB,EAAD,CAAQU,KAAK,UAAUH,OAAQgB,MAC/B,kBAACvB,EAAD,CAAQU,KAAK,QAAQH,OAAQiB,MAC7B,kBAACxB,EAAD,CAAQU,KAAK,SAASH,OAAQkB,MAC9B,kBAACzB,EAAD,CAAQU,KAAK,WAAYH,OAAQmB,MACjC,kBAAC1B,EAAD,CAAQU,KAAK,cAAcH,OAAQoB,MACnC,kBAAC3B,EAAD,CAAQU,KAAK,gBAAgBH,OAAQkB,MACrC,kBAACzB,EAAD,CAAQU,KAAK,gBAAgBH,OAAQqB,MACrC,kBAAC5B,EAAD,CAAQU,KAAK,SAASH,OAAQsB,W,GAtBlBC,aA6BtBR,EAAwB,CAC1BS,WAAaC,OACbC,YAAcD,OACdE,UAAW,MACXC,OAAQ,OACRC,MAAO,OACPC,OAAQ,QACRC,WAAY,OACZC,OAAQ,kBACRC,QAAS,OACTC,MAAO,QAGLtC,EAAuB,CACzBkC,OAAQ,MACRD,ME5FoC,MF6FpCM,aAAc,OACdP,OAAQ,MAIN3B,EAAmB,CACrB6B,OAAQ,MACRD,MAAO,OAIL3B,EAAmB,GAKVW,IGrGAuB,MARf,WACE,OACE,6BACI,kBAAC,EAAD,Q,YCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.22a1c47d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as constants from '../constants';\nimport AjaxCall from '../../ajax.js';\n\nimport {\n    faFont, \n    faFileImage,\n    faBars,\n    faArrowsAlt,\n    faAlignLeft,\n    faAlignRight,\n    faAsterisk,\n    faArrowDown,\n    faCircle \n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nconsole.log(AjaxCall());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Button(props) {\n    return (\n        <button style={buttonContainerStyle} onClick={sideBarButton_OnClick}>\n            <FontAwesomeIcon icon={props.faIcon} style={sideBarIconStyle}/>\n            <p style={sideBarTextStyle}>{props.text}</p>\n        </button>\n        );\n}\n\n\nfunction sideBarButton_OnClick(buttonName) {\n    console.log(buttonName + \" clicked\");\n}\n\n\n\n\n\nclass EditorSideBar extends Component {\n    constructor(props){\n        super(props);\n        this.sideBarButton_OnClick.bind(this);\n    }\n\n    sideBarButton_OnClick() {\n        console.log(\"clicked\");\n    }\n\n    render() {\n\n\n        return (\n            <div style={sideBarContainerStyle}>\n                <Button text=\"Heading\" faIcon={faFont}/>\n                <Button text=\"Image\" faIcon={faFileImage}/>\n                <Button text=\"Button\" faIcon={faAsterisk}/>\n                <Button text=\"Dividers\"  faIcon={faBars}/>\n                <Button text=\"Align Right\" faIcon={faAlignRight}/>\n                <Button text=\"Increase Size\" faIcon={faAsterisk}/>\n                <Button text=\"Decrease Size\" faIcon={faArrowDown}/>\n                <Button text=\"Colour\" faIcon={faCircle}/>\n            </div>\n        );\n    };\n}\n\n\nconst sideBarContainerStyle = {\n    marginLeft: (constants.SideBarWidthAsInt) + \"vh\",\n    marginRight: (constants.SideBarWidthAsInt) + \"vh\",\n    marginTop: \"2vh\",\n    margin: \"auto\",\n    width: \"50vh\",\n    height: \"100vh\",\n    background: \"grey\",\n    border: \"3px solid green\",\n    padding: \"10px\",\n    float: \"left\",\n};\n\nconst buttonContainerStyle = {\n    height: \"20%\", \n    width: constants.EditorSideBarButtonWidth,\n    borderRadius: \"16px\",\n    margin: \"5%\",\n    \n}\n\nconst sideBarIconStyle = {\n    height: \"7vh\",\n    width: \"7vh\",\n    \n}\n\nconst sideBarTextStyle = {\n\n}\n\n\nexport default EditorSideBar","import $ from \"jquery\";\r\nexport default function AjaxCall() {\r\n    // $(document).ready(function(){\r\n        $.post(\"/home/student/c4f00g03/public_html/ajax.php\", { //src\r\n            function: \"test\",\r\n            message:\"hello\",\r\n          }, function(data) {\r\n            alert(data);\r\n          });\r\n    // });\r\n\r\n\r\n    // return data;\r\n    return 'test';\r\n}","export const TopBarHeight = '10vh';\nexport const SideBarWidth = '60px';\nexport const SideBarWidthAsInt = 10;\nexport const EditorSideBarButtonWidth = '40%';","import React from 'react';\nimport EditorStart from './editor/components/EditorSidebar';\n\nfunction App() {\n  return (\n    <div>\n        <EditorStart/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport '@atlaskit/css-reset'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister()"],"sourceRoot":""}